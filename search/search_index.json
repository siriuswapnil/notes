{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Data%20Structures%20and%20Algorithms/","title":"Linked Lists","text":"<p>this is a sample dsa note</p>"},{"location":"Data%20Structures%20and%20Algorithms/Leetcode/valid_palindrome/","title":"Valid Palindrome (easy)","text":"<pre><code>class Solution:\n    def isPalindrome(self, s: str) -&gt; bool:\n        new_string = [string for string in s if string.isalnum()]\n        clean_string = \"\".join(new_string).lower()\n        print(clean_string)\n        start = 0\n        end = len(clean_string) - 1\n        while start &lt;= end:\n            if clean_string[start] != clean_string[end]:\n                return False\n            start += 1\n            end -= 1\n        return True\n</code></pre>"},{"location":"Deep%20Learning/FastAI/fast-ai/","title":"FastAI Notes","text":""},{"location":"Deep%20Learning/FastAI/fast-ai/#this-is-a-sample-note-page","title":"This is a sample note page","text":""}]}